html
  head
    link(rel='stylesheet', href='bower_components/reveal.js/css/reveal.css')
    link(rel='stylesheet', href='bower_components/reveal.js/css/theme/beige.css')
    link(rel='stylesheet', href='bower_components/reveal.js/lib/css/zenburn.css')
    link(rel='stylesheet', href='bower_components/font-awesome/css/font-awesome.css')
    link(rel='stylesheet', href='styles/index.css')
  body
    .reveal
      .slides
        section
          h1 Real-time data analysis at scale
        section
          img.avatar(src='http://www.gravatar.com/avatar/e64a6fdad3b10abef158134cef18d1ec?s=200')
          p
            strong Vlad È˜tirbu
          p Principal Engineer, Cloud Software, Nokia Technologies
          p
            i.fa.fa-twitter  @VladStirbu
          p
            i.fa.fa-github  vstirbu
        section
          section
            h1 Batch vs Real-time Data Processing
            h2 (shallow dive)
          section
            h2 Batch
            pre
              code.
                var data = 'the quick brown fox';
                
                var wc = data.split(' ').reduce(function (result, value) {
                  if (result[value]) {
                    result[value]++;
                  } else {
                    result[value] = 1;
                  }
                  
                  return result;
                }, {});
                
                console.log(wc);
          section
            h2 Realtime
            pre
              code.
                var result = {};
  
                process.stdin.resume();
                process.stdin.setEncoding('utf8');
  
                process.stdin.on('data', function (data) {
                  if (result[data]) {
                    result[data]++;
                  } else {
                    result[data] = 1;
                  }
    
                  console.log(result);
                }); 
          section
            h2 Going large concerns
            ul
              li Scaling is painful
              li Poor fault-tolerance
              li Coding is tedious
        section
          section(data-background="http://lambda-architecture.net/img/la-overview_small.png")
            h2 Lambda architecture
            img.stretch(src='http://lambda-architecture.net/img/la-overview_small.png')
            p.footer http://lambda-architecture.net
          section
            h2 What we want from the speed layer
            ul
              li Guaranteed data processing
              li Horizontal scalability
              li Fault-tolerance
              li No intermediate message brokers
              li Higher level abstraction than message passing
        section
          section
            h1 Apache Storm
          section(data-background='images/companies.png')
            h2 Project background
            ul
              li Developed by Backtype and Tweeter
              li Open source 2013
              li Apache Software Foundation
            img(src='images/companies.png')
        section(data-background="images/storm-cluster.png")
          h2 Apache cluster components
          img(src='images/storm-cluster.png')
        section
          section
            h2 Concepts
            p Streams
            p Spouts
            p Bolts
            p Topologies
          section
            h2 What is a stream?
            p an unbounded sequence of tuples
            p
              span.tuple
              span.tuple
              span.tuple
              span.tuple
          section
            h2 What is a spout?
            p a source of streams
            p
              span.spout
              span.tuple
              span.tuple
              span.tuple
          section
            h2 Spouts
            p reading from streaming APIs
            p reading from message queues
            p reading from databases
          section
            h2 What is a bolt?
            p processes input streams
            p produces new streams
            p
              span.tuple
              span.bolt
              span.tuple
              span.tuple
          section
            h2 Bolts
            p functions
            p filters
            p aggregation
            p joins
            p interactions to databases
          section 
            h2 What is a topology?
            img.stretch(src="https://storm.apache.org/documentation/images/topology.png")
            p a network of spouts and bolts
          section
            h2 Tasks
            img.stretch(src="https://storm.apache.org/documentation/images/topology-tasks.png")
            p spouts and bolts execute tasks across the clusters
          section 
            h2 Grouping streams
            p shuffle - pick a random tasks
            p fields - hasing on a subset of tuple fields
            p global - task with lowest id
            p all - send to all
        section
          section
            h1 Storm APIs
            h2 (get hands dirty)
          section
            h2 Creating bolts
            pre
              code.no-max-height.
                public class MyBolt extends BaseRichBolt {
                  private OutputCollectorBase _collector;
              
                  @Override
                  public void prepare(Map conf, TopologyContext context, OutputCollectorBase collector) {
                    _collector = collector;
                  }
              
                  @Override
                  public void execute(Tuple input) {
                    _collector.emit(input, new Values(input.getInteger(0)));
                    _collector.ack(input);
                  }
              
                  @Override
                  public void declareOutputFields(OutputFieldsDeclarer declarer) {
                    declarer.declare(new Fields("newField"));
                  }    
                }
          section
            h2 Creating spouts
            pre
              code.stretch.
                public class RandomSentenceSpout extends BaseRichSpout {
                  SpoutOutputCollector _collector;
                  Random _rand;
                
                  @Override
                  public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {
                    _collector = collector;
                    _rand = new Random();
                  }
                
                  @Override
                  public void nextTuple() {
                    Utils.sleep(100);
                    String[] sentences = new String[]{ "the cow jumped over the moon", "an apple a day keeps the doctor away",
                        "four score and seven years ago", "snow white and the seven dwarfs", "i am at two with nature" };
                    String sentence = sentences[_rand.nextInt(sentences.length)];
                    _collector.emit(new Values(sentence));
                  }
                
                  @Override
                  public void declareOutputFields(OutputFieldsDeclarer declarer) {
                    declarer.declare(new Fields("word"));
                  }
                }
          section
            h2 Creating topologies
            pre
              code.
                TopologyBuilder builder = new TopologyBuilder();
                
                builder.setSpout("sentences", new RandomSentenceSpout(), 5);
                
                builder.setBolt("split", new SplitSentence(), 8)
                        .shuffleGrouping("sentences");
                        
                builder.setBolt("count", new WordCount(), 12)
                        .fieldsGrouping("split", new Fields("word"));
          section
            h2 Multi-language support
            p JavaScript
            p Python
            p Ruby
        section
          h1 Lets see running code
          h2 (Word Count)
        section
          h2 Resources
          p https://storm.apache.org
          p https://github.com/vstirbu/storm-intro
        
    script(src='bower_components/reveal.js/lib/js/head.min.js')
    script(src='bower_components/reveal.js/js/reveal.js')
    script(src='scripts/index.js')

